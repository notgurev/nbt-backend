{"version":3,"sources":["ui/components/surface.js","../../../src/divider.tsx","features/field/components/field-info.js","features/field/components/field-card.js","pages/fields/fields.js"],"names":["Surface","chakra","children","props","css","Divider","forwardRef","useStyleConfig","borderColor","omitThemingProps","orientation","__css","dividerStyles","vertical","borderLeftWidth","height","horizontal","borderBottomWidth","width","ref","aria-orientation","border","borderStyle","className","cx","ItemValue","as","dateFormat","Intl","DateTimeFormat","formatDate","dateString","format","Date","parse","FieldInfo","fieldId","useSelector","state","fields","entities","byId","name","previousCulture","culture","grade","sowingDate","collectionDate","fontSize","direction","spacing","fontWeight","marginTop","FieldCard","polygon","defaultState","bounds","zoom","padding","FieldsPage"],"mappings":"uMAiBaA,EAAUC,aAbE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaC,EAAhB,mCACvB,cAAC,IAAD,yBACEC,IAAKA,YAAF,4JAKCD,GANN,aAQGD,S,qhBCIE,IAAMG,EAAUC,aAA+B,cACpD,MASIC,YAAe,UATnB,GAAM,EAAN,EAAM,kBAAN,EAAM,oBAAN,EAAM,iBAAN,EAAM,mBAAN,EAAM,cAAN,EAAM,YAOJC,EAPF,EAOEA,YAPF,6HAUA,EAKIC,YALJ,GAAM,EAAN,EAAM,UAAN,IAEEC,mBAFF,MAAM,aAAN,EAGEC,EAHF,EAGEA,MAHF,2CAOMC,EAAgB,CACpBC,SAAU,CACRC,gBACEA,SAFM,MAGRC,OAAQ,QAEVC,WAAY,CACVC,kBACEA,SAFQ,MAGVC,MAAO,SAIX,OACE,gBAAC,IAAD,MACEC,IADF,EAEEC,mBAAkBV,GAFpB,GAIEC,MAAK,QAEHU,OAFG,IAIHb,cACAc,eACGV,EANA,GAJP,GAaEW,UAAWC,YAAG,iBAAkBD,SAWlC,EAAJ,IACElB,yB,qCC7DIoB,EAAY,SAAC,GAAD,IAAGvB,EAAH,EAAGA,SAAaC,EAAhB,mCAChB,cAAC,IAAD,yBAAKuB,GAAG,UAAavB,GAArB,aACGD,MAICyB,EAAa,IAAIC,KAAKC,eACtBC,EAAa,SAAAC,GAAU,OAAIJ,EAAWK,OAAOC,KAAKC,MAAMH,KAEjDI,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC1B,EAIIC,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOC,SAASD,OAAOE,KAAKL,MAH3DM,EADF,EACEA,KACAC,EAFF,EAEEA,gBAFF,IAGEC,QAAiBC,EAHnB,EAGaH,KAAaI,EAH1B,EAG0BA,WAAYC,EAHtC,EAGsCA,eAGtC,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAASC,SAAS,KAAlB,SACE,eAAC,IAAD,CAAOC,UAAU,SAASC,QAAS,EAAnC,UACE,cAAC,IAAD,4EACA,eAAC,IAAD,CAAMC,WAAW,SAASH,SAAS,QAAnC,iFACgBN,KAEhB,cAACrC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAM8C,WAAW,SAASH,SAAS,QAAnC,uHAGA,eAAC,IAAD,CAAMI,UAAW,EAAjB,UACE,eAAC,IAAD,wCACQ,cAAC,EAAD,UAAYP,OAEpB,eAAC,IAAD,oGAA0B,cAAC,EAAD,UAAYF,OACtC,eAAC,IAAD,iEAAqB,cAAC,EAAD,UAAYb,EAAWgB,QAC5C,eAAC,IAAD,wKAAuC,cAAC,EAAD,UAAYhB,EAAWiB,sB,kBC1C/DM,EAAY,SAAC,GAA2B,IAAzBjB,EAAwB,EAAxBA,QACpBkB,GAD4C,2BAClCjB,aACd,SAACC,GAAD,OAAWA,EAAMC,OAAOC,SAASD,OAAOE,KAAKL,GAASkB,YAGxD,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAML,UAAU,SAAhB,UACE,cAAC,IAAD,CAAKlC,OAAO,OAAOG,MAAM,OAAzB,SACE,cAAC,IAAD,CACEqC,aAAc,CAAEC,OAAQF,EAAQ,GAAIG,KAAM,IAC1CvC,MAAM,OACNH,OAAO,WAGX,cAAC,IAAD,CAAK2C,QAAS,EAAd,SACE,cAAC,EAAD,CAAWtB,QAASA,YClBjBuB,EAAa,WACxB,OACE,cAAC,IAAD,UACE,cAAC,EAAD,CAAWvB,QAAQ,UAAUrB,OAAO,YAK3B4C","file":"static/js/5.120d7e3b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box, chakra } from \"@chakra-ui/react\";\nimport { css } from \"@emotion/react\";\n\nconst SurfaceComponent = ({ children, ...props }) => (\n  <Box\n    css={css`\n      border-radius: 10px;\n      border: 1px solid var(--chakra-colors-gray-200);\n      padding: var(--chakra-space-2);\n    `}\n    {...props}\n  >\n    {children}\n  </Box>\n);\n\nexport const Surface = chakra(SurfaceComponent);\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\n/**\n * Layout component used to visually separate content in a list or group.\n * It display a thin horizontal or vertical line, and renders a `hr` tag.\n *\n * @see Docs https://chakra-ui.com/docs/data-display/divider\n */\nexport const Divider = forwardRef<DividerProps, \"hr\">((props, ref) => {\n  const {\n    borderLeftWidth,\n    borderBottomWidth,\n    borderTopWidth,\n    borderRightWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  } = useStyleConfig(\"Divider\", props)\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemingProps(props)\n\n  const dividerStyles = {\n    vertical: {\n      borderLeftWidth:\n        borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\",\n    },\n    horizontal: {\n      borderBottomWidth:\n        borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\",\n    },\n  }\n\n  return (\n    <chakra.hr\n      ref={ref}\n      aria-orientation={orientation}\n      {...rest}\n      __css={{\n        ...styles,\n        border: \"0\",\n\n        borderColor,\n        borderStyle,\n        ...dividerStyles[orientation],\n        ...__css,\n      }}\n      className={cx(\"chakra-divider\", className)}\n    />\n  )\n})\n\nexport interface DividerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Divider\"> {\n  orientation?: \"horizontal\" | \"vertical\"\n}\n\nif (__DEV__) {\n  Divider.displayName = \"Divider\"\n}\n","import React from \"react\";\nimport {\n  Box,\n  Divider,\n  Heading,\n  List,\n  ListItem,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport { Surface } from \"../../../ui/components/surface\";\nimport { useSelector } from \"react-redux\";\n\nconst ItemValue = ({ children, ...props }) => (\n  <Box as=\"strong\" {...props}>\n    {children}\n  </Box>\n);\n\nconst dateFormat = new Intl.DateTimeFormat();\nconst formatDate = dateString => dateFormat.format(Date.parse(dateString));\n\nexport const FieldInfo = ({ fieldId }) => {\n  const {\n    name,\n    previousCulture,\n    culture: { name: grade, sowingDate, collectionDate },\n  } = useSelector((state) => state.fields.entities.fields.byId[fieldId]);\n\n  return (\n    <Box>\n      <Surface fontSize=\"md\">\n        <Stack direction=\"column\" spacing={3}>\n          <Heading>–ö—É–ª—å—Ç—É—Ä–∞ üåΩ</Heading>\n          <Text fontWeight=\"medium\" fontSize=\"1.2em\">\n            –ó–¥–µ—Å—å —Ä–∞—Å—Ç–µ—Ç {name}\n          </Text>\n          <Divider />\n          <Box>\n            <Text fontWeight=\"medium\" fontSize=\"1.2em\">\n              –°–≤–µ–¥–µ–Ω–∏—è –æ –∫—É–ª—å—Ç—É—Ä–µ:\n            </Text>\n            <List marginTop={1}>\n              <ListItem>\n                –°–æ—Ä—Ç: <ItemValue>{grade}</ItemValue>\n              </ListItem>\n              <ListItem>–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫: <ItemValue>{previousCulture}</ItemValue></ListItem>\n              <ListItem>–î–∞—Ç–∞ —Å–µ–≤–∞: <ItemValue>{formatDate(sowingDate)}</ItemValue></ListItem>\n              <ListItem>–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞: <ItemValue>{formatDate(collectionDate)}</ItemValue></ListItem>\n            </List>\n          </Box>\n        </Stack>\n      </Surface>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { FieldInfo } from \"./field-info\";\nimport { Map, YMaps } from \"react-yandex-maps\";\nimport { useSelector } from \"react-redux\";\nimport { Box, Flex } from \"@chakra-ui/react\";\n\nexport const FieldCard = ({ fieldId, ...props }) => {\n  const polygon = useSelector(\n    (state) => state.fields.entities.fields.byId[fieldId].polygon\n  );\n\n  return (\n    <YMaps>\n      <Flex direction=\"column\">\n        <Box height=\"70vh\" width=\"100%\">\n          <Map\n            defaultState={{ bounds: polygon[0], zoom: 10 }}\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Box>\n        <Box padding={2}>\n          <FieldInfo fieldId={fieldId} />\n        </Box>\n      </Flex>\n    </YMaps>\n  );\n};\n","import React from \"react\";\nimport { FieldCard } from \"../../features/field/components/field-card\";\nimport { Box } from \"@chakra-ui/react\";\n\nexport const FieldsPage = () => {\n  return (\n    <Box>\n      <FieldCard fieldId=\"example\" height=\"100%\" />\n    </Box>\n  );\n};\n\nexport default FieldsPage;\n"],"sourceRoot":""}