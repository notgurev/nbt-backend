{"version":3,"sources":["features/auth/LoginForm.js","features/auth/Card.js","pages/authorization/authorization-page.js"],"names":["LoginForm","props","useState","username","setUserName","password","setPassword","useDisclosure","isOpen","onToggle","inputRef","React","axios","require","form","onSubmit","e","preventDefault","spacing","id","name","type","autoComplete","required","value","onChange","event","target","justify","bg","variant","aria-label","icon","onClick","input","current","focus","preventScroll","length","requestAnimationFrame","setSelectionRange","colorScheme","size","fontSize","data","post","then","response","accessToken","localStorage","setItem","JSON","stringify","to","Card","useColorModeValue","py","px","base","md","shadow","rounded","sm","AuthorizationPage","minH","lg","maxW","mx"],"mappings":"qUAmBaA,EAAY,SAACC,GACtB,MAAkCC,mBAAS,IAA3C,mBAAQC,EAAR,KAAkBC,EAAlB,KACA,EAAkCF,mBAAS,IAA3C,mBAAQG,EAAR,KAAkBC,EAAlB,KACA,EAA6BC,cAArBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SACVC,EAAWC,SAAa,MACxBC,EAAQC,EAAQ,KAgEtB,OACI,cAAC,IAAOC,KAAR,yBACIC,SAAU,SAACC,GACPA,EAAEC,mBAEFhB,GAJR,aAMI,eAAC,IAAD,CAAOiB,QAAQ,IAAf,UACI,eAAC,IAAD,CAAaC,GAAG,QAAhB,UACI,cAAC,IAAD,4CACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQC,aAAa,QAAQC,UAAQ,EAAEC,MAAOrB,EAAUsB,SAtEhF,SAACC,GACdtB,EAAYsB,EAAMC,OAAOH,aAuEjB,eAAC,IAAD,CAAaL,GAAG,WAAhB,UACA,cAAC,IAAD,CAAMS,QAAQ,gBAAd,SACI,cAAC,IAAD,yBAEA,eAAC,IAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,GAAG,yBACHC,QAAQ,QACRC,aAAYvB,EAAS,gBAAkB,kBACvCwB,KAAMxB,EAAS,cAAC,IAAD,IAAe,cAAC,IAAD,IAC9ByB,QAxCN,WAClBxB,IACA,IAAMyB,EAAQxB,EAASyB,QAEvB,GAAID,EAAO,CACPA,EAAME,MAAM,CACRC,eAAe,IAEnB,IAAMC,EAA8B,EAArBJ,EAAMV,MAAMc,OAC3BC,uBAAsB,WAClBL,EAAMM,kBAAkBF,EAAQA,YAiCxB,cAAC,IAAD,CAAOlB,KAAK,WAAWC,KAAMb,EAAS,OAAS,WAAYc,aAAa,WAAWC,UAAQ,EAAEC,MAAOnB,EAAUoB,SAlF1G,SAACC,GACrBpB,EAAYoB,EAAMC,OAAOH,gBAqFjB,cAAC,IAAD,CAAQH,KAAK,SAASoB,YAAY,OAAOC,KAAK,KAAKC,SAAS,KAAKV,QAlFvD,WAClB,IAAMW,EAAO,CACTzC,WACAE,YAKJO,EAAMiC,KAAK,wCAAyCD,GAAME,MAAK,SAAAC,GAK3D,OAJIA,EAASH,KAAKI,aACdC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUL,EAASH,OAGlD,cAAC,IAAD,CAAUS,GAAG,qBAqEhB,qBAGA,cAAC,IAAD,CAAQhC,KAAK,SAASoB,YAAY,OAAOC,KAAK,KAAKC,SAAS,KAAKV,QApEvD,WAClB,IAAMW,EAAO,CACTzC,WACAE,YAKJO,EAAMiC,KAAK,wCAAyCD,GAAME,MAAK,SAAAC,GAM3D,OALIA,EAASH,KAAKI,aACdC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUL,EAASH,OAIlD,cAAC,IAAD,CAAUS,GAAG,qBAsDhB,4BCtHHC,EAAO,SAACrD,GAAD,OAChB,cAAC,IAAD,aACI4B,GAAI0B,YAAkB,QAAS,YAC/BC,GAAG,IACHC,GAAI,CACAC,KAAM,IACNC,GAAI,MAERC,OAAO,OACPC,QAAS,CACLC,GAAI,OAEJ7D,KCVC8D,EAAoB,kBAC7B,cAAC,IAAD,CACIlC,GAAI0B,YAAkB,UAAW,WACjCS,KAAK,QACLR,GAAG,KACHC,GAAI,CACAC,KAAM,IACNO,GAAI,KANZ,SASI,cAAC,IAAD,CAAKC,KAAK,MAAMC,GAAG,OAAnB,SACI,cAAC,EAAD,UACI,cAAC,EAAD,WAMDJ","file":"static/js/7.2a7a8a31.chunk.js","sourcesContent":["import {\n    Button,\n    chakra, Flex,\n    FormControl,\n    FormLabel,\n    IconButton,\n    Input, InputGroup,\n    InputRightElement,\n    Stack,\n    useDisclosure\n} from '@chakra-ui/react'\nimport * as React from 'react'\nimport {useState} from \"react\";\nimport {HiEye, HiEyeOff} from \"react-icons/hi\";\nimport ReactRouterDOM from \"react-dom\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\n\n\nexport const LoginForm = (props) => {\n    const [ username, setUserName ] = useState('');\n    const [ password, setPassword ] = useState('');\n    const { isOpen, onToggle } = useDisclosure()\n    const inputRef = React.useRef(null)\n    const axios = require('axios')\n    // const Redirect = ReactRouterDOM.Redirect;\n\n\n    const setLogin = (event) => {\n        setUserName(event.target.value);\n    }\n\n    const setUserPassword = (event) => {\n        setPassword(event.target.value);\n    }\n\n    const signInHandler = () => {\n        const data = {\n            username,\n            password\n        };\n\n        // console.log(data, 'data')\n\n        axios.post(\"http://localhost:8080/api/auth/signin\", data).then(response => {\n            if (response.data.accessToken) {\n                localStorage.setItem('user', JSON.stringify(response.data));\n\n            }\n            return <Redirect to=\"/field_input\" />;\n            console.log(response.data);\n        })\n    }\n    const signUpHandler = () => {\n        const data = {\n            username,\n            password\n        };\n\n        // console.log(data, 'data')\n\n        axios.post(\"http://localhost:8080/api/auth/signup\", data).then(response => {\n            if (response.data.accessToken) {\n                localStorage.setItem('user', JSON.stringify(response.data));\n\n            }\n            // console.log(response.data);\n            return <Redirect to=\"/field_input\" />;\n\n        })\n    }\n    const onClickReveal = () => {\n        onToggle()\n        const input = inputRef.current\n\n        if (input) {\n            input.focus({\n                preventScroll: true,\n            })\n            const length = input.value.length * 2\n            requestAnimationFrame(() => {\n                input.setSelectionRange(length, length)\n            })\n        }\n    }\n\n\n\n    return (\n        <chakra.form\n            onSubmit={(e) => {\n                e.preventDefault() // your login logic here\n            }}\n            {...props}\n        >\n            <Stack spacing=\"6\">\n                <FormControl id=\"email\">\n                    <FormLabel>Email address or mobile phone</FormLabel>\n                    <Input name=\"email\" type=\"email\" autoComplete=\"email\" required  value={username} onChange={setLogin}/>\n                </FormControl>\n                <FormControl id=\"password\">\n                <Flex justify=\"space-between\">\n                    <FormLabel>Password</FormLabel>\n                </Flex>\n                    <InputGroup>\n                        <InputRightElement>\n                            <IconButton\n                                bg=\"transparent !important\"\n                                variant=\"ghost\"\n                                aria-label={isOpen ? 'Mask password' : 'Reveal password'}\n                                icon={isOpen ? <HiEyeOff /> : <HiEye />}\n                                onClick={onClickReveal}\n                            />\n                        </InputRightElement>\n                        <Input name=\"password\" type={isOpen ? 'text' : 'password'} autoComplete=\"password\" required  value={password} onChange={setUserPassword}/>\n                    </InputGroup>\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"blue\" size=\"lg\" fontSize=\"md\" onClick={signInHandler}>\n                    Sign in\n                </Button>\n                <Button type=\"submit\" colorScheme=\"blue\" size=\"lg\" fontSize=\"md\" onClick={signUpHandler}>\n                    Sign up\n                </Button>\n            </Stack>\n        </chakra.form>\n    )\n}\n","import { Box, useColorModeValue } from '@chakra-ui/react'\nimport * as React from 'react'\n\nexport const Card = (props) => (\n    <Box\n        bg={useColorModeValue('white', 'gray.700')}\n        py=\"8\"\n        px={{\n            base: '4',\n            md: '10',\n        }}\n        shadow=\"base\"\n        rounded={{\n            sm: 'lg',\n        }}\n        {...props}\n    />\n)","import React from \"react\";\nimport {Box, useColorModeValue} from \"@chakra-ui/react\";\nimport {LoginForm} from \"../../features/auth/LoginForm\";\nimport {Card} from \"../../features/auth/Card\";\n\nexport const AuthorizationPage = () => (\n    <Box\n        bg={useColorModeValue('gray.50', 'inherit')}\n        minH=\"100vh\"\n        py=\"12\"\n        px={{\n            base: '4',\n            lg: '8',\n        }}\n    >\n        <Box maxW=\"400\" mx=\"auto\">\n            <Card>\n                <LoginForm />\n            </Card>\n        </Box>\n    </Box>\n);\n\nexport default AuthorizationPage;"],"sourceRoot":""}