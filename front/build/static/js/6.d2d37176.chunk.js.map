{"version":3,"sources":["ui/components/surface.js","../../../src/center.tsx","../../../src/ChevronDown.tsx","../../../src/ChevronUp.tsx","../../../src/PlusSquare.tsx","pages/home/components/control-panel.js","features/field/components/fields-list.js","pages/home/home.js"],"names":["Surface","chakra","children","props","css","Center","baseStyle","display","alignItems","justifyContent","ChevronDownIcon","createIcon","displayName","d","ChevronUpIcon","PlusSquareIcon","path","fill","stroke","strokeLinecap","strokeWidth","height","width","rx","ry","x","y","ControlPanel","onFieldsToggle","useState","fieldsOpen","isFieldsOpen","fieldButtonCallback","useCallback","state","direction","align","spacing","colorScheme","variant","onClick","ml","aria-label","borderRadius","icon","FieldsListItem","fieldId","index","cultureName","useSelector","entities","fields","byId","to","FieldsList","fieldIds","allIds","map","HomePage","flexGrow","defaultState","center","zoom","padding","val","position","zIndex"],"mappings":"uMAiBaA,EAAUC,aAbE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaC,EAAhB,mCACvB,cAAC,IAAD,yBACEC,IAAKA,YAAF,4JAKCD,GANN,aAQGD,S,oKCDE,IAAMG,EAASJ,YAAO,MAAO,CAClCK,UAAW,CACTC,QADS,OAETC,WAFS,SAGTC,eAAgB,YAIhB,EAAJ,IACEJ,wBAOF,I,mCC1BaK,EAAkBC,YAAW,CACxCC,YADwC,kBAExCC,EAAG,iDCFQC,EAAgBH,YAAW,CACtCE,EADsC,iDAEtCD,YAAa,kBCDFG,EAAiBJ,YAAW,CACvCC,YADuC,iBAEvCI,KACE,qBAAGC,KAAH,OAAeC,OAAf,eAAqCC,cAArC,QAA2DC,YAAY,KACrE,wBAAMC,OAAN,KAAkBC,MAAlB,KAA6BC,GAA7B,IAAoCC,GAApC,IAA2CC,EAA3C,IAAiDC,EAAE,MACnD,wBAAMb,EAAE,YACR,wBAAMA,EAAE,e,OCLDc,EAAe,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,eAAmBzB,EAAY,kCAC5D,EAAmC0B,oBAAS,GAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAsBC,uBAAY,WACtCF,GAAa,SAAAG,GAAK,OAAKA,KACvBN,EAAeE,KACd,CAACA,IAEJ,OACE,cAACzB,EAAD,2BAAYF,GAAZ,aACE,eAAC,IAAD,CAAOgC,UAAU,MAAMC,MAAM,SAASC,QAAS,EAA/C,UACE,eAAC,IAAD,CAAQC,YAAY,OAAOC,QAAQ,QAAQC,QAASR,EAApD,sCACQF,EAAa,cAACpB,EAAD,CAAiB+B,GAAI,IAAQ,cAAC3B,EAAD,CAAe2B,GAAI,OAErE,cAAC,IAAD,CACEH,YAAY,OACZI,aAAW,YACXC,aAAa,MACbC,KAAM,cAAC7B,EAAD,MAER,cAAC,IAAD,CAAQuB,YAAY,OAAOC,QAAQ,QAAnC,+D,oDClBFM,EAAiB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACzBC,EAAgBC,aAAY,SAAAf,GAAK,OAAIA,EAAMgB,SAASC,OAAOC,KAAKN,MAAhEE,YAER,OACE,cAAC,IAAD,CAAMK,GAAE,kBAAaP,GAArB,SACE,eAAC,IAAD,WACE,eAAC,IAAD,uCAAeC,EAAQ,KACvB,eAAC,IAAD,CAAMT,YAAY,WAAlB,+DAAwCU,WAMnCM,EAAa,SAAC,GAAkB,IAAbnD,EAAY,oBACpCoD,EAAWN,aAAY,SAAAf,GAAK,OAAIA,EAAMiB,OAAOD,SAASC,OAAOK,UAEnE,OACE,cAAC,IAAD,2BAAUrD,GAAV,aACGoD,EAASE,KAAI,SAACX,EAASC,GAAV,OACZ,cAAC,IAAD,UACE,cAAC,EAAD,CAAgBD,QAASA,EAASC,MAAOA,aCpBtCW,EAAW,WACtB,MAAmC7B,oBAAS,GAA5C,mBAAmBE,GAAnB,WAEA,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAMI,UAAU,SAASd,OAAO,QAAhC,UACE,cAAC,IAAD,CAAKsC,SAAS,IAAd,SACE,cAAC,IAAD,CACEC,aAAc,CAAEC,OAAQ,CAAC,UAAW,WAAYC,KAAM,GACtDxC,MAAM,OACND,OAAO,WAGX,cAAC,EAAD,CAAc0C,QAAS,EAAGnC,eAAgB,SAACoC,GAAD,OAASjC,EAAaiC,MAChE,cAAC,EAAD,CAAYC,SAAS,WAAWC,OAAO,MAAM7C,OAAO,eAM7CqC","file":"static/js/6.d2d37176.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box, chakra } from \"@chakra-ui/react\";\nimport { css } from \"@emotion/react\";\n\nconst SurfaceComponent = ({ children, ...props }) => (\n  <Box\n    css={css`\n      border-radius: 10px;\n      border: 1px solid var(--chakra-colors-gray-200);\n      padding: var(--chakra-space-2);\n    `}\n    {...props}\n  >\n    {children}\n  </Box>\n);\n\nexport const Surface = chakra(SurfaceComponent);\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface CenterProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * React component used to horizontally and vertically center its child.\n * It uses the popular `display: flex` centering technique.\n *\n * @see Docs https://chakra-ui.com/docs/layout/center\n */\nexport const Center = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n})\n\nif (__DEV__) {\n  Center.displayName = \"Center\"\n}\n\nexport interface AbsoluteCenterProps extends HTMLChakraProps<\"div\"> {\n  axis?: \"horizontal\" | \"vertical\" | \"both\"\n}\n\nconst centerStyles = {\n  horizontal: {\n    insetStart: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n  vertical: {\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  both: {\n    insetStart: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}\n\n/**\n * React component used to horizontally and vertically center an element\n * relative to its parent dimensions.\n *\n * It uses the `position: absolute` strategy.\n *\n * @see Docs https://chakra-ui.com/docs/layout/center\n * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop\n */\nexport const AbsoluteCenter = forwardRef<AbsoluteCenterProps, \"div\">(\n  (props, ref) => {\n    const { axis = \"both\", ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        __css={centerStyles[axis]}\n        {...rest}\n        position=\"absolute\"\n      />\n    )\n  },\n)\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ChevronDownIcon = createIcon({\n  displayName: \"ChevronDownIcon\",\n  d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\",\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ChevronUpIcon = createIcon({\n  d: \"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\",\n  displayName: \"ChevronUpIcon\",\n})\n","import { createIcon } from \"@chakra-ui/icon\"\nimport * as React from \"react\"\n\nexport const PlusSquareIcon = createIcon({\n  displayName: \"PlusSquareIcon\",\n  path: (\n    <g fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeWidth=\"2\">\n      <rect height=\"18\" width=\"18\" rx=\"2\" ry=\"2\" x=\"3\" y=\"3\" />\n      <path d=\"M12 8v8\" />\n      <path d=\"M8 12h8\" />\n    </g>\n  ),\n})\n","import React, { useCallback, useState } from \"react\";\nimport { Button, Center, IconButton, Stack } from \"@chakra-ui/react\";\nimport { ChevronDownIcon, ChevronUpIcon, PlusSquareIcon } from \"@chakra-ui/icons\";\n\nexport const ControlPanel = ({ onFieldsToggle, ...props }) => {\n  const [fieldsOpen, isFieldsOpen] = useState(false);\n\n  const fieldButtonCallback = useCallback(() => {\n    isFieldsOpen(state => !state);\n    onFieldsToggle(fieldsOpen);\n  }, [fieldsOpen]);\n\n  return (\n    <Center {...props}>\n      <Stack direction=\"row\" align=\"center\" spacing={5}>\n        <Button colorScheme=\"teal\" variant=\"ghost\" onClick={fieldButtonCallback}>\n          Поля {fieldsOpen ? <ChevronDownIcon ml={1} /> : <ChevronUpIcon ml={1} /> }\n        </Button>\n        <IconButton\n          colorScheme=\"teal\"\n          aria-label=\"new field\"\n          borderRadius=\"50%\"\n          icon={<PlusSquareIcon />}\n        />\n        <Button colorScheme=\"teal\" variant=\"ghost\">\n          Профиль\n        </Button>\n      </Stack>\n    </Center>\n  );\n};","import React from \"react\";\r\nimport { Heading, List, ListItem, Text } from \"@chakra-ui/react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Surface } from \"../../../ui/components/surface\";\r\n\r\nconst FieldsListItem = ({ fieldId, index }) => {\r\n  const { cultureName } = useSelector(state => state.entities.fields.byId[fieldId]);\r\n\r\n  return (\r\n    <Link to={`/fields/${fieldId}`}>\r\n      <Surface>\r\n        <Heading>Поле {index + 1}</Heading>\r\n        <Text colorScheme=\"gray.500\">Культура: {cultureName}</Text>\r\n      </Surface>\r\n    </Link>\r\n  )\r\n};\r\n\r\nexport const FieldsList = ({ ...props }) => {\r\n  const fieldIds = useSelector(state => state.fields.entities.fields.allIds);\r\n\r\n  return (\r\n    <List {...props}>\r\n      {fieldIds.map((fieldId, index) => (\r\n        <ListItem>\r\n          <FieldsListItem fieldId={fieldId} index={index} />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  )\r\n};","import React, { useState } from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport { Map, YMaps } from \"react-yandex-maps\";\nimport { ControlPanel } from \"./components/control-panel\";\nimport { FieldsList } from \"../../features/field/components/fields-list\";\n\nexport const HomePage = () => {\n  const [fieldsOpen, isFieldsOpen] = useState(false);\n\n  return (\n    <YMaps>\n      <Flex direction=\"column\" height=\"100vh\">\n        <Box flexGrow=\"1\">\n          <Map\n            defaultState={{ center: [55.751574, 37.573856], zoom: 9 }}\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Box>\n        <ControlPanel padding={2} onFieldsToggle={(val) => isFieldsOpen(val)} />\n        <FieldsList position=\"absolute\" zIndex=\"100\" height=\"100%\"  />\n      </Flex>\n    </YMaps>\n  );\n};\n\nexport default HomePage;\n"],"sourceRoot":""}