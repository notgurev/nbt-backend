{"version":3,"sources":["store.js","pages/routes.js","App.js","reportWebVitals.js","index.js","ui/components/combobox.js","features/field/components/field-info-input.js","features/field/components/map-input.js","ui/components/stepper.js","features/field/components/soil-info-input.js","features/field/components/environment-properties-input.js","features/field/components/send-field-form.js","features/field/logic/field.js","api/field.js"],"names":["configureStore","reducer","fields","fieldsReducer","UserFieldsPage","React","lazy","FieldInputPage","HomePage","AuthorizationPage","withSuspense","Component","props","fallback","routes","path","component","RouteWithSubRoutes","route","render","Routes","map","i","App","store","query","apikey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","Combobox","items","listMaxHeight","label","defaultValue","onChange","inputProps","useState","inputItems","setInputItems","useCombobox","defaultInputValue","onInputValueChange","inputValue","filter","item","toLowerCase","startsWith","isOpen","getToggleButtonProps","getMenuProps","getLabelProps","getInputProps","getComboboxProps","highlightedIndex","getItemProps","lineHeight","aria-label","variant","isRound","size","icon","ArrowUp","ArrowDown","bgColor","borderRadius","boxShadow","maxHeight","overflowY","position","zIndex","width","marginTop","index","_hover","padding","ChakraDatePicker","chakra","DatePicker","FieldInfoInput","register","setValue","watch","control","cultureValue","previousCultureValue","useEffect","direction","spacing","fontSize","align","margin","val","labelProps","name","field","value","MapInput","polygonEmpty","isPolygonEmpty","polygon","setPolygon","polygonRef","useCallback","editor","startDrawing","events","add","coordinates","geometry","getCoordinates","length","buttonRef","button","setCoordinates","defaultState","center","zoom","height","modules","data","content","options","maxWidth","float","instanceRef","defaultGeometry","Stepper","maxSteps","initialStep","step","setStep","prevButtonCallback","nextButtonCallback","justify","isDisabled","onClick","as","soilTypes","NPKTable","min","max","SoilInfoInput","soilType","type","pointerEvents","EnvironmentPropertiesInput","screens","defaultValues","cultureName","previousCulture","soil","SendFieldForm","screen","setScreen","useForm","handleSubmit","dispatch","useDispatch","onSubmit","console","dir","flexGrow","bottom","textAlign","colorScheme","CheckCircle","initialState","entities","byId","example","culture","sowingDate","Date","toDateString","collectionDate","allIds","sendFieldData","createAsyncThunk","fieldData","a","fetch","method","body","JSON","stringify","ok","Error","createSlice","reducers","extraReducers","builder","addCase","fulfilled","state","payload"],"mappings":"2PAIeA,cAAe,CAC5BC,QAAS,CACPC,OAAQC,O,sBCANC,EAAiBC,IAAMC,MAAK,kBAAM,uDAClCC,EAAiBF,IAAMC,MAAK,kBAAM,iCAClCE,EAAWH,IAAMC,MAAK,kBAAM,uDAC5BG,EAAoBJ,IAAMC,MAAK,kBAAM,uDAErCI,EAAe,SAACC,GAAD,OAAe,SAACC,GAAD,OAClC,cAAC,WAAD,CAAUC,SAAU,mFAApB,SACE,cAACF,EAAD,eAAeC,QAIbE,EAAS,CACb,CACEC,KAAM,eACNC,UAAWN,EAAaH,IAE1B,CACEQ,KAAM,QACNC,UAAWN,EAAaD,IAE1B,CACEM,KAAM,UACNC,UAAWN,EAAaN,IAE1B,CACEW,KAAM,IACNC,UAAWN,EAAaF,KAItBS,EAAqB,SAACC,GAAD,OACzB,cAAC,IAAD,CACEH,KAAMG,EAAMH,KACZI,OAAQ,SAACP,GAAD,OAEN,aADA,CACCM,EAAMF,UAAP,2BAAqBJ,GAArB,IAA4BE,OAAQI,EAAMJ,cAKnCM,EAAS,kBACpB,cAAC,IAAD,UACGN,EAAOO,KAAI,SAACH,EAAOI,GAAR,OACV,cAAC,EAAD,eAAgCJ,GAAPI,SC3BhBC,MAdf,WACE,OACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,QAAD,CAAOC,MAAO,CAAEC,OAAQ,wCAAxB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,aCFGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASjB,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,uQCHaa,EAAW,SAAC,GAQlB,IAPLC,EAOI,EAPJA,MAOI,IANJC,qBAMI,MANY,QAMZ,EALJC,EAKI,EALJA,MAKI,IAJJC,oBAII,MAJW,GAIX,EAHJC,EAGI,EAHJA,SACAC,EAEI,EAFJA,WACGlC,EACC,wFACJ,EAAoCmC,mBAASN,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EASIC,YAAY,CACdT,MAAOO,EACPG,kBAAmBP,EACnBQ,mBAAoB,YAAqB,IAAlBC,EAAiB,EAAjBA,WACrBR,EAASQ,GACTJ,EACER,EAAMa,QAAO,SAACC,GAAD,OACXA,EAAKC,cAAcC,WAAWJ,EAAWG,sBAf/CE,EADF,EACEA,OACAC,EAFF,EAEEA,qBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,cACAC,EALF,EAKEA,cACAC,EANF,EAMEA,iBACAC,EAPF,EAOEA,iBACAC,EARF,EAQEA,aAcF,OACE,eAAC,IAAD,2BAASrD,GAAT,cACG+B,EAAMkB,KACP,eAAC,IAAD,2BAAgBE,KAAhB,IAAoCG,WAAW,UAA/C,UACE,cAAC,IAAD,2BACMJ,KACAhB,IAEN,cAAC,IAAD,UACE,cAAC,IAAD,2BACMa,KADN,IAEEQ,aAAW,gBACXC,QAAQ,QACRC,SAAO,EACPC,KAAK,KACLC,KAAMb,EAAS,cAACc,EAAA,EAAD,IAAkB,cAACC,EAAA,EAAD,aAIvC,cAAC,IAAD,2BACMb,KADN,IAEEc,QAAQ,QACRC,aAAa,MACbC,UAAU,KACVC,UAAWnC,EACXoC,UAAU,OACVC,SAAS,WACTC,OAAO,MACPC,MAAM,OACNC,UAAW,EAVb,SAYGxB,GACCV,EAAW3B,KAAI,SAACkC,EAAM4B,GAAP,OACb,cAAC,IAAD,2BAEMlB,EAAa,CAAEV,OAAM4B,WAF3B,IAGET,QAASS,IAAUnB,EAAmB,WAAa,GACnDoB,OAAQ,CAAEV,QAAS,WACnBW,QAAS,CAAC,EAAG,GALf,SAOG9B,IAPH,UACUA,GADV,OACiB4B,e,yBCxEvB1C,EAAQ,CACZ,uHACA,6HACA,kFACA,mDACA,uCACA,2BACA,uCACA,yDACA,yDACA,4EAGI6C,EAAmBC,YAAOC,KAEnBC,EAAiB,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAAYjF,EAAY,yDAC5EkF,EAAeF,EAAM,eACrBG,EAAuBH,EAAM,mBAOnC,OALAI,qBAAU,WACRN,EAAS,eACTA,EAAS,qBACR,CAACA,IAGF,eAAC,IAAD,yBACEO,UAAU,SACVC,QAAS,EACTC,SAAS,KACTC,MAAM,UACNC,OAAQ,EACRnC,WAAW,SACPtD,GAPN,cASE,cAAC,IAAD,UACE,cAAC,EAAD,CACE6B,MAAOA,EACPG,aAAckD,EACdjD,SAAU,SAACyD,GAAD,OAASX,EAAS,cAAeW,IAC3C3D,MAAO,SAAC4D,GAAD,OACL,cAAC,IAAD,2BAAeA,GAAf,wEAIN,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,cAAC,IAAD,eAAWb,EAAS,cAEtB,cAAC,IAAD,UACE,cAAC,EAAD,CACEjD,MAAOA,EACPG,aAAcmD,EACdlD,SAAU,SAACyD,GAAD,OAASX,EAAS,kBAAmBW,IAC/C3D,MAAO,SAAC4D,GAAD,OACL,cAAC,IAAD,2BAAeA,GAAf,4GAIN,eAAC,IAAD,WACE,cAAC,IAAD,gEACA,cAAC,IAAD,CACEC,KAAK,qBACLX,QAASA,EACT1E,OAAQ,oBAAGsF,MAAS5D,EAAZ,EAAYA,SAAU6D,EAAtB,EAAsBA,MAAtB,OACN,cAACpB,EAAD,CAAkBoB,MAAOA,EAAO7D,SAAUA,UAIhD,eAAC,IAAD,WACE,cAAC,IAAD,uKACA,cAAC,IAAD,CACE2D,KAAK,yBACLX,QAASA,EACT1E,OAAQ,oBAAGsF,MAASC,EAAZ,EAAYA,MAAO7D,EAAnB,EAAmBA,SAAnB,OACN,cAACyC,EAAD,CAAkBoB,MAAOA,EAAO7D,SAAUA,e,QCzEzC8D,EAAW,WACtB,MAAuC5D,oBAAS,GAAhD,mBAAO6D,EAAP,KAAqBC,EAArB,KACA,EAA8B9D,mBAAS,MAAvC,mBAAO+D,EAAP,KAAgBC,EAAhB,KAEMC,EAAaC,uBAAY,SAACH,GACzBA,IACLC,EAAWD,GACXA,EAAQI,OAAOC,eAEfL,EAAQM,OAAOC,IAAI,kBAAkB,WACnC,IAAMC,EAAcR,EAAQS,SAASC,iBAChCF,EAAYG,QAAWH,EAAY,GAAGG,OAI3CZ,GAAe,GAHbA,GAAe,SAKlB,IAEGa,EAAYT,uBAChB,SAACU,GACMA,GACLA,EAAOP,OAAOC,IAAI,SAAS,WACrBP,IACFA,EAAQS,SAASK,eAAe,IAChCd,EAAQI,OAAOC,qBAIrB,CAACL,IAGH,OACE,eAAC,MAAD,CACEe,aAAc,CAAEC,OAAQ,CAAC,UAAW,WAAYC,KAAM,GACtD9C,MAAM,OACN+C,OAAO,OACPC,QAAS,CAAC,0BAJZ,WAMIrB,GACA,cAAC,SAAD,CACEsB,KAAM,CAAEC,QAAS,uEACjBC,QAAS,CAAEC,SAAU,IAAKC,MAAO,QACjCC,YAAab,IAGjB,cAAC,gBAAD,CAAeU,QAAS,CAAEE,MAAO,WACjC,cAAC,UAAD,CAASC,YAAavB,EAAYwB,gBAAiB,S,2BCzC5CC,EAAU,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,YAAa9F,EAAyB,EAAzBA,SAAajC,EAAY,qDACxE,EAAwBmC,mBAAS4F,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAqB7B,uBAAY,WACjC2B,EAAO,IACTC,GAAQ,SAAAD,GAAI,OAAIA,EAAO,KACvB/F,EAAS+F,EAAO,MAEjB,CAACA,IAEEG,EAAqB9B,uBAAY,WACjC2B,EAAOF,IACTG,GAAQ,SAAAD,GAAI,OAAIA,EAAO,KACvB/F,EAAS+F,EAAO,MAEjB,CAACA,IAEJ,OACE,eAAC,IAAD,yBAAMI,QAAQ,gBAAgB5C,MAAM,UAAaxF,GAAjD,cACE,cAAC,IAAD,CAAQqI,WAAYL,GAAQ,EAAGM,QAASJ,EAAxC,4CACA,eAAC,IAAD,CAAMK,GAAG,OAAT,UAAiBP,EAAjB,MAA0BF,KAC1B,cAAC,IAAD,CAAQO,WAAYL,GAAQF,EAAUQ,QAASH,EAA/C,uD,0BCfAK,EAAY,CAChB,mDACA,6CACA,gHACA,yDACA,mDACA,6CACA,yDACA,6CACA,mDACA,mDACA,2EACA,+DACA,iCACA,yDACA,qEACA,mDACA,gHACA,+DACA,iFACA,0DAGIC,EAAW,SAAC,GAAD,IAAG3D,EAAH,EAAGA,SAAH,mCACf,eAAC,IAAD,WACE,cAAC,IAAD,4LACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,cAAC,IAAD,mDACA,cAAC,IAAD,kDAGJ,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,aAAO4D,IAAK,EAAGC,IAAK,IAAKX,KAAM,KAAUlD,EAAS,qBAEpD,cAAC,IAAD,UACE,cAAC,IAAD,aACE4D,IAAK,EACLC,IAAK,IACLX,KAAM,KACFlD,EAAS,uBAGjB,cAAC,IAAD,UACE,cAAC,IAAD,aACE4D,IAAK,EACLC,IAAK,IACLX,KAAM,KACFlD,EAAS,+BAQZ8D,EAAgB,SAAC,GAAsD,IAApD9D,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,MAAmBhF,GAAY,EAAxBiF,QAAwB,0DAC3E4D,EAAW7D,EAAM,aAMvB,OAJAI,qBAAU,WACRN,EAAS,eACR,CAACA,IAGF,eAAC,IAAD,yBACEO,UAAU,SACVC,QAAS,EACTC,SAAS,KACTC,MAAM,UACNC,OAAQ,EACRnC,WAAW,SACPtD,GAPN,cASE,cAAC,IAAD,UACE,cAAC,EAAD,CACE6B,MAAO2G,EACPxG,aAAc6G,EACd5G,SAAU,SAACyD,GAAD,OAASX,EAAS,YAAaW,IACzC3D,MAAO,SAAC4D,GAAD,OACL,cAAC,IAAD,2BAAeA,GAAf,yEAIN,eAAC,IAAD,WACE,cAAC,IAAD,uGACA,eAAC,IAAD,WACE,cAAC,IAAD,aACEmD,KAAK,SACLJ,IAAK,EACLC,IAAK,IACLX,KAAM,KACFlD,EAAS,cAEf,cAAC,IAAD,CAAmBiE,cAAc,OAAjC,SACE,cAAC,IAAD,wBAIN,eAAC,IAAD,WACE,cAAC,IAAD,sPACA,eAAC,IAAD,WACE,cAAC,IAAD,aAAOD,KAAK,UAAahE,EAAS,2BAClC,cAAC,IAAD,CAAmBiE,cAAc,OAAjC,SACE,cAAC,IAAD,mCAIN,cAAC,EAAD,CAAUjE,SAAUA,IACpB,eAAC,IAAD,WACE,cAAC,IAAD,gHACA,eAAC,IAAD,WACE,cAAC,IAAD,aAAOgE,KAAK,UAAahE,EAAS,2BAClC,cAAC,IAAD,CAAmBiE,cAAc,OAAjC,SACE,cAAC,IAAD,kCC5HCC,EAA6B,SAAC,GAMpC,IALLlE,EAKI,EALJA,SAIG9E,GACC,EAJJ+E,SAII,EAHJC,MAGI,EAFJC,QAEI,0DACJ,OACE,eAAC,IAAD,yBACEI,UAAU,SACVC,QAAS,EACTC,SAAS,KACTC,MAAM,UACNC,OAAQ,EACRnC,WAAW,SACPtD,GAPN,cASE,eAAC,IAAD,WACE,cAAC,IAAD,iJACA,cAAC,IAAD,aAAO8I,KAAK,UAAahE,EAAS,mBAEpC,eAAC,IAAD,WACE,cAAC,IAAD,gMACA,eAAC,IAAD,WACE,cAAC,IAAD,aAAOgE,KAAK,UAAahE,EAAS,eAClC,cAAC,IAAD,CAAmBiE,cAAc,OAAjC,SACE,cAAC,IAAD,mCAIN,eAAC,IAAD,WACE,cAAC,IAAD,mHACA,eAAC,IAAD,WACE,cAAC,IAAD,aAAOD,KAAK,UAAahE,EAAS,WAClC,cAAC,IAAD,CAAmBiE,cAAc,OAAjC,SACE,cAAC,IAAD,+CCpCNE,EAAU,CACd,SAACjJ,GAAD,OAAW,cAAC,EAAD,eAAcA,KACzB,SAACA,GAAD,OAAW,cAAC,EAAD,eAAqBA,KAChC,SAACA,GAAD,OAAW,cAAC,EAAD,eAAmBA,KAC9B,SAACA,GAAD,OAAW,cAAC,EAAD,eAAgCA,MAKvCkJ,EAAgB,CACpBC,YAAa,GACbC,gBAAiB,GACjBC,KAAM,CACJP,KAAM,KAIGQ,EAAgB,WAC3B,IAXoBtB,EAAMhI,EAW1B,EAA4BmC,mBAAS,GAArC,mBAAOoH,EAAP,KAAeC,EAAf,KACA,EAA6DC,YAAQ,CACnEP,kBADMQ,EAAR,EAAQA,aAAc5E,EAAtB,EAAsBA,SAAUG,EAAhC,EAAgCA,QAASF,EAAzC,EAAyCA,SAAUC,EAAnD,EAAmDA,MAG7C2E,EAAWC,cACXC,EAAWxD,uBACf,SAACiB,GACCwC,QAAQC,IAAIzC,KAEd,CAACqC,EAAUJ,IAOb,OACE,sBAAMM,SAAUH,EAAaG,GAA7B,SACE,eAAC,IAAD,CAAMxE,UAAU,SAAS+B,OAAO,QAAhC,UACE,cAAC,IAAD,CAAK4C,SAAS,IAAI9F,UAAU,OAA5B,UA9Bc8D,EA+BEuB,EA/BIvJ,EA+BI,CAAE8E,WAAUC,WAAUE,UAASD,SA/BzBiE,EAAQjB,EAAO,GAAGhI,MAiChD,cAAC,EAAD,CACE+H,YAAa,EACbD,SAAUmB,EAAQpC,OAClB5E,SAba,SAACyD,GACpB8D,EAAU9D,IAaJjB,QAAS,CAAC,EAAG,KAEf,cAAC,IAAD,CAAKN,SAAS,WAAW8F,OAAO,OAAO5F,MAAM,OAAOI,QAAS,CAAC,EAAG,GAAjE,SACE,cAAC,IAAD,CAAKyF,UAAU,SAAf,SACE,cAAC,IAAD,CACEpB,KAAK,SACLqB,YAAY,OACZ5G,aAAW,SACXQ,aAAa,MACbJ,KAAM,cAACyG,EAAA,EAAD,gB,iCC7DdC,EAAe,CACnBC,SAAU,CACRhL,OAAQ,CACNiL,KAAM,CACJC,QAAS,CACPrB,YAAa,mDACbjD,QAAS,CAEP,CAAC,EAAE,GAAI,IAAK,EAAE,GAAI,IAAK,EAAE,GAAI,IAAK,EAAE,GAAI,MAE1CkD,gBAAiB,6CACjBqB,QAAS,CACP7E,KAAM,6CACN8E,YAAY,IAAIC,MAAOC,eACvBC,gBAAgB,IAAIF,MAAOC,gBAE7BxD,OAAQ,MAGZ0D,OAAQ,CAAC,cAKTC,EAAgBC,YAAiB,uBAAD,uCAEpC,WAAOC,GAAP,SAAAC,EAAA,sEC7BuB5D,ED8Bc2D,EC9BNE,MAAM,kBAAmB,CACxDC,OAAQ,OACRC,KAAMC,KAAKC,UAAUjE,KD2BrB,kBAEiBkE,GAFjB,yCAGaP,GAHb,aAKU,IAAIQ,MAAM,iBALpB,iCC7BuB,IAAAnE,ID6BvB,OAFoC,uDAyBzB/H,EAdOmM,YAAY,CAC9B9F,KAAM,SACNyE,eACAsB,SAAU,GAGVC,cAAe,SAAAC,GACbA,EAAQC,QAAQf,EAAcgB,WAAW,SAACC,EAAD,GAAwB,EAAdC,cAOd5M,U","file":"static/js/main.274df5be.chunk.js","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { fieldsReducer } from \"./features/field\";\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    fields: fieldsReducer,\r\n  },\r\n});","import React, { Suspense } from 'react';\nimport {\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nconst UserFieldsPage = React.lazy(() => import('./fields/fields'));\nconst FieldInputPage = React.lazy(() => import('./field-input/field-input-page'));\nconst HomePage = React.lazy(() => import('./home/home'));\nconst AuthorizationPage = React.lazy(() => import('./authorization/authorization-page'));\n\nconst withSuspense = (Component) => (props) => (\n  <Suspense fallback={<div>Загрузка</div>}>\n    <Component {...props} />\n  </Suspense>\n);\n\nconst routes = [\n  {\n    path: '/field_input',\n    component: withSuspense(FieldInputPage),\n  },\n  {\n    path: '/auth',\n    component: withSuspense(AuthorizationPage),\n  },\n  {\n    path: '/fields',\n    component: withSuspense(UserFieldsPage),\n  },\n  {\n    path: '/',\n    component: withSuspense(HomePage),\n  },\n];\n\nconst RouteWithSubRoutes = (route) => (\n  <Route\n    path={route.path}\n    render={(props) => (\n      // pass the sub-routes down to keep nesting\n      <route.component {...props} routes={route.routes} />\n    )}\n  />\n);\n\nexport const Routes = () => (\n  <Switch>\n    {routes.map((route, i) => (\n      <RouteWithSubRoutes key={i} {...route} />\n    ))}\n  </Switch>\n);","import { ChakraProvider } from \"@chakra-ui/react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { YMaps } from \"react-yandex-maps/dist/development/react-yandex-maps\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { Routes } from \"./pages/routes\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ChakraProvider>\n        <YMaps query={{ apikey: \"1378d282-a125-475d-a207-93a8fff40f80\" }}>\n          <Router>\n            <Routes />\n          </Router>\n        </YMaps>\n      </ChakraProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState } from \"react\";\nimport { useCombobox } from \"downshift\";\nimport {\n  Box,\n  IconButton,\n  Input,\n  InputGroup,\n  InputRightElement,\n  List,\n  ListItem,\n} from \"@chakra-ui/react\";\nimport { ArrowDownIcon, ArrowUpIcon } from \"@chakra-ui/icons\";\n\nexport const Combobox = ({\n  items,\n  listMaxHeight = \"200px\",\n  label,\n  defaultValue = \"\",\n  onChange,\n  inputProps,\n  ...props\n}) => {\n  const [inputItems, setInputItems] = useState(items);\n  const {\n    isOpen,\n    getToggleButtonProps,\n    getMenuProps,\n    getLabelProps,\n    getInputProps,\n    getComboboxProps,\n    highlightedIndex,\n    getItemProps,\n  } = useCombobox({\n    items: inputItems,\n    defaultInputValue: defaultValue,\n    onInputValueChange: ({ inputValue }) => {\n      onChange(inputValue);\n      setInputItems(\n        items.filter((item) =>\n          item.toLowerCase().startsWith(inputValue.toLowerCase())\n        )\n      );\n    },\n  });\n\n  return (\n    <Box {...props}>\n      {label(getLabelProps())}\n      <InputGroup {...getComboboxProps()} lineHeight=\"shorter\">\n        <Input\n          {...getInputProps()}\n          {...inputProps}\n        />\n        <InputRightElement>\n          <IconButton\n            {...getToggleButtonProps()}\n            aria-label=\"toggle button\"\n            variant=\"ghost\"\n            isRound\n            size=\"sm\"\n            icon={isOpen ? <ArrowUpIcon /> : <ArrowDownIcon />}\n          />\n        </InputRightElement>\n      </InputGroup>\n      <List\n        {...getMenuProps()}\n        bgColor=\"white\"\n        borderRadius=\"3px\"\n        boxShadow=\"md\"\n        maxHeight={listMaxHeight}\n        overflowY=\"auto\"\n        position=\"absolute\"\n        zIndex=\"100\"\n        width=\"100%\"\n        marginTop={2}\n      >\n        {isOpen &&\n          inputItems.map((item, index) => (\n            <ListItem\n              key={`${item}${index}`}\n              {...getItemProps({ item, index })}\n              bgColor={index === highlightedIndex ? \"gray.100\" : \"\"}\n              _hover={{ bgColor: \"gray.50\" }}\n              padding={[1, 2]}\n            >\n              {item}\n            </ListItem>\n          ))}\n      </List>\n    </Box>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport \"react-date-picker/dist/DatePicker.css\";\nimport { chakra, FormControl, FormLabel, Input, Stack } from \"@chakra-ui/react\";\nimport { Combobox } from \"../../../ui/components/combobox\";\nimport DatePicker from \"react-date-picker\";\nimport { Controller } from \"react-hook-form\";\n\nconst items = [\n  \"пшеница яровая мягкая\",\n  \"пшеница яровая твердая\",\n  \"пшеница озимая\",\n  \"кукуруза\",\n  \"ячмень\",\n  \"овес\",\n  \"свекла\",\n  \"картофель\",\n  \"подсолнух\",\n  \"виноградники\",\n];\n\nconst ChakraDatePicker = chakra(DatePicker);\n\nexport const FieldInfoInput = ({ register, setValue, watch, control, ...props }) => {\n  const cultureValue = watch(\"cultureName\");\n  const previousCultureValue = watch(\"previousCulture\");\n\n  useEffect(() => {\n    register(\"cultureName\");\n    register(\"previousCulture\");\n  }, [register]);\n\n  return (\n    <Stack\n      direction=\"column\"\n      spacing={6}\n      fontSize=\"md\"\n      align=\"stretch\"\n      margin={2}\n      lineHeight=\"short\"\n      {...props}\n    >\n      <FormControl>\n        <Combobox\n          items={items}\n          defaultValue={cultureValue}\n          onChange={(val) => setValue(\"cultureName\", val)}\n          label={(labelProps) => (\n            <FormLabel {...labelProps}>Культура</FormLabel>\n          )}\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel>Сорт</FormLabel>\n        <Input {...register(\"grade\")} />\n      </FormControl>\n      <FormControl>\n        <Combobox\n          items={items}\n          defaultValue={previousCultureValue}\n          onChange={(val) => setValue(\"previousCulture\", val)}\n          label={(labelProps) => (\n            <FormLabel {...labelProps}>Предшественник</FormLabel>\n          )}\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel>Дата сева</FormLabel>\n        <Controller\n          name=\"culture.sowingTime\"\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <ChakraDatePicker value={value} onChange={onChange} />\n          )}\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel>Дата сборки предшественника</FormLabel>\n        <Controller\n          name=\"culture.collectionTime\"\n          control={control}\n          render={({ field: { value, onChange } }) => (\n            <ChakraDatePicker value={value} onChange={onChange} />\n          )}\n        />\n      </FormControl>\n    </Stack>\n  );\n};\n","import React, { useState, useCallback } from \"react\";\nimport {\n  Button,\n  Map,\n  SearchControl,\n  Polygon,\n} from \"react-yandex-maps/dist/development/react-yandex-maps\";\n\nexport const MapInput = () => {\n  const [polygonEmpty, isPolygonEmpty] = useState(true);\n  const [polygon, setPolygon] = useState(null);\n\n  const polygonRef = useCallback((polygon) => {\n    if (!polygon) return;\n    setPolygon(polygon);\n    polygon.editor.startDrawing();\n\n    polygon.events.add(\"geometrychange\", () => {\n      const coordinates = polygon.geometry.getCoordinates();\n      if (!coordinates.length || !coordinates[0].length) {\n        isPolygonEmpty(true);\n        return;\n      }\n      isPolygonEmpty(false);\n    });\n  }, []);\n\n  const buttonRef = useCallback(\n    (button) => {\n      if (!button) return;\n      button.events.add(\"click\", () => {\n        if (polygon) {\n          polygon.geometry.setCoordinates([]);\n          polygon.editor.startDrawing();\n        }\n      });\n    },\n    [polygon]\n  );\n\n  return (\n    <Map\n      defaultState={{ center: [55.751574, 37.573856], zoom: 9 }}\n      width=\"100%\"\n      height=\"100%\"\n      modules={[\"geoObject.addon.editor\"]}\n    >\n      {!polygonEmpty && (\n        <Button\n          data={{ content: \"Удалить поле\" }}\n          options={{ maxWidth: 128, float: \"left\" }}\n          instanceRef={buttonRef}\n        />\n      )}\n      <SearchControl options={{ float: \"right\" }} />\n      <Polygon instanceRef={polygonRef} defaultGeometry={[]} />\n    </Map>\n  );\n};\n","import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Flex, Text } from \"@chakra-ui/react\";\r\n\r\n\r\n/**\r\n *\r\n * @param maxSteps\r\n * @param initialStep\r\n * @param onChange\r\n * @param props\r\n * @returns {ChakraComponent}\r\n * @constructor\r\n */\r\nexport const Stepper = ({ maxSteps, initialStep, onChange, ...props }) => {\r\n  const [step, setStep] = useState(initialStep);\r\n\r\n  const prevButtonCallback = useCallback(() => {\r\n    if (step > 1) {\r\n      setStep(step => step - 1);\r\n      onChange(step - 1);\r\n    }\r\n  }, [step]);\r\n\r\n  const nextButtonCallback = useCallback(() => {\r\n    if (step < maxSteps) {\r\n      setStep(step => step + 1);\r\n      onChange(step + 1);\r\n    }\r\n  }, [step]);\r\n\r\n  return (\r\n    <Flex justify=\"space-between\" align=\"center\" {...props}>\r\n      <Button isDisabled={step <= 1} onClick={prevButtonCallback}>Назад</Button>\r\n      <Text as=\"span\">{step} / {maxSteps}</Text>\r\n      <Button isDisabled={step >= maxSteps} onClick={nextButtonCallback}>Вперед</Button>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nStepper.propTypes = {\r\n  maxSteps: PropTypes.number,\r\n  initialStep: PropTypes.number,\r\n  onChange: PropTypes.func,\r\n};","import React, { useEffect } from \"react\";\nimport \"react-date-picker/dist/DatePicker.css\";\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Stack,\n  Table,\n  TableCaption,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n} from \"@chakra-ui/react\";\nimport { Combobox } from \"../../../ui/components/combobox\";\n\nconst soilTypes = [\n  \"чернозем\",\n  \"бурозем\",\n  \"дерново-подзолистая\",\n  \"оглеенная\",\n  \"дерновая\",\n  \"луговая\",\n  \"пойменная\",\n  \"глеевая\",\n  \"болотная\",\n  \"торфяная\",\n  \"солончаковая\",\n  \"солонцовая\",\n  \"бурая\",\n  \"краснозем\",\n  \"подзолистая\",\n  \"рендзина\",\n  \"альпийская дерновая\",\n  \"ювенильная\",\n  \"антропогенная\",\n  \"подводная\",\n];\n\nconst NPKTable = ({ register, ...props }) => (\n  <Table>\n    <TableCaption>Содержание азота, фосфора и калия</TableCaption>\n    <Thead>\n      <Tr>\n        <Th>Азот</Th>\n        <Th>Фосфор</Th>\n        <Th>Калий</Th>\n      </Tr>\n    </Thead>\n    <Tbody>\n      <Tr>\n        <Td>\n          <Input min={0} max={100} step={0.01} {...register(\"soil.nitrogen\")} />\n        </Td>\n        <Td>\n          <Input\n            min={0}\n            max={100}\n            step={0.01}\n            {...register(\"soil.phosphorus\")}\n          />\n        </Td>\n        <Td>\n          <Input\n            min={0}\n            max={100}\n            step={0.01}\n            {...register(\"soil.potassium\")}\n          />\n        </Td>\n      </Tr>\n    </Tbody>\n  </Table>\n);\n\nexport const SoilInfoInput = ({ register, setValue, watch, control, ...props }) => {\n  const soilType = watch(\"soil.type\");\n\n  useEffect(() => {\n    register(\"soil.type\");\n  }, [register]);\n\n  return (\n    <Stack\n      direction=\"column\"\n      spacing={6}\n      fontSize=\"md\"\n      align=\"stretch\"\n      margin={2}\n      lineHeight=\"short\"\n      {...props}\n    >\n      <FormControl>\n        <Combobox\n          items={soilTypes}\n          defaultValue={soilType}\n          onChange={(val) => setValue(\"soil.type\", val)}\n          label={(labelProps) => (\n            <FormLabel {...labelProps}>Тип почвы</FormLabel>\n          )}\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel>Сорт (в процентах)</FormLabel>\n        <InputGroup>\n          <Input\n            type=\"number\"\n            min={0}\n            max={100}\n            step={0.01}\n            {...register(\"soil.wet\")}\n          />\n          <InputRightElement pointerEvents=\"none\">\n            <Text>%</Text>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl>\n        <FormLabel>Максимальная глубина корневой системы ( в см.)</FormLabel>\n        <InputGroup>\n          <Input type=\"number\" {...register(\"soil.deepOfRootSystem\")} />\n          <InputRightElement pointerEvents=\"none\">\n            <Text>см</Text>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <NPKTable register={register} />\n      <FormControl>\n        <FormLabel>Температура почвы</FormLabel>\n        <InputGroup>\n          <Input type=\"number\" {...register(\"soil.earthTemperature\")} />\n          <InputRightElement pointerEvents=\"none\">\n            <Text>℃</Text>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n    </Stack>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport \"react-date-picker/dist/DatePicker.css\";\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\n\nexport const EnvironmentPropertiesInput = ({\n  register,\n  setValue,\n  watch,\n  control,\n  ...props\n}) => {\n  return (\n    <Stack\n      direction=\"column\"\n      spacing={6}\n      fontSize=\"md\"\n      align=\"stretch\"\n      margin={2}\n      lineHeight=\"short\"\n      {...props}\n    >\n      <FormControl>\n        <FormLabel>Наиболее благоприятный pH</FormLabel>\n        <Input type=\"number\" {...register(\"culture.ph\")} />\n      </FormControl>\n      <FormControl>\n        <FormLabel>Средняя толщина снежного покрова</FormLabel>\n        <InputGroup>\n          <Input type=\"number\" {...register(\"snowCover\")} />\n          <InputRightElement pointerEvents=\"none\">\n            <Text>см</Text>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl>\n        <FormLabel>Урожайность за 5 лет</FormLabel>\n        <InputGroup>\n          <Input type=\"number\" {...register(\"yield\")} />\n          <InputRightElement pointerEvents=\"none\">\n            <Text>т/га</Text>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n    </Stack>\n  );\n};","import React, { useCallback, useState } from \"react\";\nimport { MapInput } from \"./map-input\";\nimport { Stepper } from \"../../../ui/components/stepper\";\nimport { Box, Flex, IconButton } from \"@chakra-ui/react\";\nimport { FieldInfoInput } from \"./field-info-input\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { CheckCircleIcon } from \"@chakra-ui/icons\";\nimport { SoilInfoInput } from \"./soil-info-input\";\nimport { EnvironmentPropertiesInput } from \"./environment-properties-input\";\n\nconst screens = [\n  (props) => <MapInput {...props} />,\n  (props) => <FieldInfoInput  {...props} />,\n  (props) => <SoilInfoInput {...props} />,\n  (props) => <EnvironmentPropertiesInput {...props} />\n];\n\nconst renderScreen = (step, props) => screens[step - 1](props);\n\nconst defaultValues = {\n  cultureName: \"\",\n  previousCulture: \"\",\n  soil: {\n    type: \"\",\n  },\n};\n\nexport const SendFieldForm = () => {\n  const [screen, setScreen] = useState(1);\n  const { handleSubmit, register, control, setValue, watch } = useForm({\n    defaultValues,\n  });\n  const dispatch = useDispatch();\n  const onSubmit = useCallback(\n    (data) => {\n      console.dir(data);\n    },\n    [dispatch, screen]\n  );\n\n  const onStepChange = (val) => {\n    setScreen(val);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Flex direction=\"column\" height=\"100vh\">\n        <Box flexGrow=\"1\" overflowY=\"auto\">\n          {renderScreen(screen, { register, setValue, control, watch })}\n        </Box>\n        <Stepper\n          initialStep={1}\n          maxSteps={screens.length}\n          onChange={onStepChange}\n          padding={[2, 4]}\n        />\n        <Box position=\"absolute\" bottom=\"65px\" width=\"100%\" padding={[0, 4]}>\n          <Box textAlign=\"center\">\n            <IconButton\n              type=\"submit\"\n              colorScheme=\"teal\"\n              aria-label=\"finish\"\n              borderRadius=\"50%\"\n              icon={<CheckCircleIcon />}\n            />\n          </Box>\n        </Box>\n      </Flex>\n    </form>\n  );\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { sendField } from \"../../../api/field\";\r\n\r\nconst initialState = {\r\n  entities: {\r\n    fields: {\r\n      byId: {\r\n        example: {\r\n          cultureName: 'Кукуруза',\r\n          polygon: [\r\n            // Координаты внешнего контура.\r\n            [[-80, 60], [-90, 50], [-60, 40], [-80, 60]],\r\n          ],\r\n          previousCulture: 'Пшеница',\r\n          culture: {\r\n            name: 'Добрыня',\r\n            sowingDate: new Date().toDateString(),\r\n            collectionDate: new Date().toDateString(),\r\n          },\r\n          height: 1.5,\r\n        }\r\n      },\r\n      allIds: ['example'],\r\n    },\r\n  },\r\n};\r\n\r\nconst sendFieldData = createAsyncThunk(\r\n  `fields/sendFieldData`,\r\n  async (fieldData) => {\r\n      const response = await sendField(fieldData);\r\n      if (response.ok) {\r\n        return fieldData;\r\n      }\r\n      throw new Error('Request error');\r\n  }\r\n);\r\n\r\nconst fieldsSlice = createSlice({\r\n  name: 'fields',\r\n  initialState,\r\n  reducers: {\r\n\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(sendFieldData.fulfilled, (state, { payload }) => {\r\n\r\n    })\r\n  }\r\n});\r\n\r\n\r\nexport const fieldsReducer = fieldsSlice.reducer;","export const sendField = data => fetch('/api/cropFields', {\r\n  method: 'POST',\r\n  body: JSON.stringify(data),\r\n});"],"sourceRoot":""}